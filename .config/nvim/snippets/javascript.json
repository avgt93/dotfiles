{
  "dpr": {
    "prefix": "dpr",
    "body": ["console.log(`${$1}`);"],
    "description": "Debug print"
  },
  "listing": {
    "prefix": "listing",
    "description": "NODE LISTING SNIPPET",
    "body": [
      "import { _request } from \"./utils\";",
      "import { handler } from \"./handler\";",
      "import { isTestEnvironment, sleep, HttpResponse } from \"@vortex-ts-sdk/core\";",
      "import { VtxLogger } from \"@vortex-ts-sdk/vtx-logger\";",
      "import { HttpCrawler, pq } from \"@vortex-ts-sdk/http-crawler\";",
      "import { ProxyInstance } from \"@vortex-ts-sdk/core/lib/proxy/proxy-utils\";",
      "import { isScalar } from \"@vortex-ts-sdk/core\";",
      "",
      "export async function getListing() {",
      "  try {",
      "    let response: HttpResponse;",
      "    let retry: number = 0;",
      "",
      "    do {",
      "      let requestURL = ``;",
      "      console.log(\"Request URL: \", requestURL);",
      "",
      "      response = await _request(handler, \"GET\", requestURL);",
      "      if (response.getStatusCode() === 200) {",
      "        VtxLogger.info(",
      "          \"Response status code: 200 for request URL: \" + requestURL,",
      "        );",
      "        break;",
      "      }",
      "      VtxLogger.info(",
      "        `Response status code: ${response.getStatusCode()}, retry: ${retry}`,",
      "      );",
      "",
      "      await sleep(4000);",
      "      handler.request.switchProxy();",
      "    } while ( retry++ < 3);",
      "  } catch (e) {",
      "    console.log(e);",
      "  }",
      "}"
    ]
  },

  "scalar": {
    "prefix": "scalar",
    "description": "NODE Scalar SNIPPET",
    "body": [
      "for (let [k, v] of Object.entries(arr)) {",
      "    if (!isScalar(v)) {",
      "        v = JSON.stringify(v) || \"\";",
      "    }",
      "    arr[k] = v;",
      "}",
      "if (isTestEnvironment()) {",
      "    console.log(arr);",
      "}",
      "await handler.dataSet.addRow(arr);"
    ]
  }
}
